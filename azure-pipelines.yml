# Build, pack, and publish a NuGet package to Cloudsmith (with dependency restore)

trigger:
- main
pr:
- main

pool:
  vmImage: ubuntu-latest

variables:
  CLOUDSMITH_ORG: globex-innovations
  CLOUDSMITH_REPO: acme-nonprod
  PKG_VERSION: 1.0.$(Build.BuildId)

steps:
- checkout: self

# .NET SDK (8.x builds net7.0 fine; change to 7.x if you prefer)
- task: UseDotNet@2
  displayName: "Use .NET SDK 8.x"
  inputs:
    packageType: 'sdk'
    version: '8.x'

# 1) Configure NuGet sources for restore:
#    - Add Cloudsmith (private) with credentials
#    - Also add NuGet.org as a public fallback
- script: |
    dotnet nuget add source "https://nuget.cloudsmith.io/$(CLOUDSMITH_ORG)/$(CLOUDSMITH_REPO)/v3/index.json" \
      -n cloudsmith -u token -p $(CS_API_KEY) --store-password-in-clear-text
    dotnet nuget add source "https://api.nuget.org/v3/index.json" -n nuget
    dotnet nuget list source
  displayName: "Configure NuGet sources (Cloudsmith + NuGet.org)"
  env:
    CS_API_KEY: $(CS_API_KEY)

# 2) Restore from both sources (Cloudsmith first)
- script: |
    dotnet restore MySolution.sln \
      --source cloudsmith \
      --source nuget
  displayName: "Restore (from Cloudsmith + NuGet.org)"

# 3) Build
- script: |
    dotnet build MySolution.sln -c Release --no-restore
  displayName: "Build"

# 4) Pack MyProject
- script: |
    dotnet pack MyProject/MyProject.csproj -c Release --no-build \
      -o "$(Build.ArtifactStagingDirectory)" \
      -p:PackageVersion=$(PKG_VERSION) -p:IsPackable=true
  displayName: "Pack NuGet"

# 5) Push package to Cloudsmith
- script: |
    dotnet nuget push "$(Build.ArtifactStagingDirectory)/*.nupkg" \
      -k $(CS_API_KEY) \
      -s "https://nuget.cloudsmith.io/$(CLOUDSMITH_ORG)/$(CLOUDSMITH_REPO)/v3/index.json" \
      --skip-duplicate
  displayName: "Push to Cloudsmith"
